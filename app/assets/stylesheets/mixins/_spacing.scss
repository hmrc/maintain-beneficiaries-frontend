////
/// @group settings/spacing
////

/// Single point spacing variables. Access using `govuk-spacing()`
/// (see `helpers/spacing`).
///
/// @type Map
/// @access private

$govuk-spacing-points: (
        0: 0,
        1: 5px,
        2: 10px,
        3: 15px,
        4: 20px,
        5: 25px,
        6: 30px,
        7: 40px,
        8: 50px,
        9: 60px
) !default;

/// Responsive spacing maps
///
/// These definitions are used to generate responsive spacing that adapts
/// according to the breakpoints (see 'helpers/spacing'). These maps should be
/// used wherever possible to standardise responsive spacing.
///
/// You can define different behaviour on tablet and desktop. The 'null'
/// breakpoint is for mobile.
///
/// Access responsive spacing with `govuk-responsive-margin` or
/// `govuk-responsive-padding` mixins (see `helpers/spacing`).
///
/// @type Map
/// @access private

$govuk-spacing-responsive-scale: (
        0: (
                null: 0,
                tablet: 0
        ),
        1: (
                null: 5px,
                tablet: 5px
        ),
        2: (
                null: 10px,
                tablet: 10px
        ),
        3: (
                null: 15px,
                tablet: 15px
        ),
        4: (
                null: 15px,
                tablet: 20px
        ),
        5: (
                null: 15px,
                tablet: 25px
        ),
        6: (
                null: 20px,
                tablet: 30px
        ),
        7: (
                null: 25px,
                tablet: 40px
        ),
        8: (
                null: 30px,
                tablet: 50px
        ),
        9: (
                null: 40px,
                tablet: 60px
        )
) !default;

////
/// @group helpers
// Taken from https://raw.githubusercontent.com/alphagov/govuk-frontend/ad596de756ef51619c6e5bc8f22f3b93479773dd/package/helpers/_spacing.scss
////


@function govuk-spacing($spacing-point) {

  $actual-input-type: type-of($spacing-point);
  @if $actual-input-type != "number" {
    @error "Expected a number (integer), but got a "
    + "#{$actual-input-type}.";
  }

  @if not map-has-key($govuk-spacing-points, $spacing-point) {
    @error "Unknown spacing variable `#{$spacing-point}`. Make sure you are using a point from the spacing scale in `_settings/spacing.scss`.";
  }

  @return map-get($govuk-spacing-points, $spacing-point);
}


@mixin _govuk-responsive-spacing($responsive-spacing-point, $property, $direction: "all", $important: false, $adjustment: false) {

  $actual-input-type: type-of($responsive-spacing-point);
  @if $actual-input-type != "number" {
    @error "Expected a number (integer), but got a " + "#{$actual-input-type}.";
  }

  @if not map-has-key($govuk-spacing-responsive-scale, $responsive-spacing-point) {
    @error "Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the "
    + "responsive spacing scale in `_settings/spacing.scss`.";
  }

  // Make sure that the return value from `_settings/spacing.scss` is a map.
  $scale-map: map-get($govuk-spacing-responsive-scale, $responsive-spacing-point);
  $actual-map-type: type-of($scale-map);
  @if $actual-map-type != "map" {
    @error "Expected a number (integer), but got a "
    + "#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)";
  }

  // Loop through each breakpoint in the map
  @each $breakpoint, $breakpoint-value in $scale-map {

    @if ($adjustment) {
      $breakpoint-value: $breakpoint-value + $adjustment;
    }

    // The 'null' breakpoint is for mobile.
    @if $breakpoint == null {

      @if $direction == all {
        #{$property}: $breakpoint-value iff($important, !important);
      } @else {
        #{$property}-#{$direction}: $breakpoint-value iff($important, !important);
      }
    } @else {
      @include media($breakpoint) {
        @if $direction == all {
          #{$property}: $breakpoint-value iff($important, !important);
        } @else {
          #{$property}-#{$direction}: $breakpoint-value iff($important, !important);
        }
      }
    }
  }
}


@mixin govuk-responsive-margin($responsive-spacing-point, $direction: "all", $important: false, $adjustment: false) {
  @include _govuk-responsive-spacing($responsive-spacing-point, "margin", $direction, $important, $adjustment);
}


@mixin govuk-responsive-padding($responsive-spacing-point, $direction: "all", $important: false, $adjustment: false) {
  @include _govuk-responsive-spacing($responsive-spacing-point, "padding", $direction, $important, $adjustment);
}